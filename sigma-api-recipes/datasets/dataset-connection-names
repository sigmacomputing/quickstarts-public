// This script gets a list of datasets and the name of the connection in use.
// Swagger: https://help.sigmacomputing.com/reference/listversiontag-1

// 1: Load environment variables from a specific .env file for configuration
require('dotenv').config({ path: 'rest-api-recipes/.env' });

// 2: Import the function to obtain a bearer token from the authenticate-bearer module
const getBearerToken = require('../get-access-token');

// 3: Import Axios for making HTTP requests
const axios = require('axios');

// 4: Load use-case specific variables from environment variables
const baseURL = process.env.baseURL; // Your base URL


const { v4: uuidv4 } = require('uuid');

// Function to retrieve datasets with connection names
async function getDatasetsWithConnections(accessToken) {
    try {
        // Make a GET request to retrieve datasets
        const datasetsResponse = await axios.get(`${baseURL}/datasets`, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        const datasets = datasetsResponse.data.entries; // Access the "entries" array

        // Initialize an object to store dataset connection information
        const datasetsWithConnections = {};

        // Iterate through each dataset
        for (const dataset of datasets) {
            // Extract the connection ID from the dataset
            const connectionId = dataset.connectionId;

            // Check if the connectionId is a valid UUID
            if (!uuidv4(connectionId)) {
                console.error(`Invalid connectionId: ${connectionId}`);
                continue; // Skip this dataset and move to the next one
            }

            // Make a GET request to retrieve connection details
            const connectionResponse = await axios.get(`${baseURL}/connections/${connectionId}`, {
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            });
            const connectionName = connectionResponse.data.name;

            // Map dataset to connection name
            datasetsWithConnections[dataset.name] = connectionName;
        }

        // Return the object containing datasets with connection names
        return datasetsWithConnections;

    } catch (error) {
        // Handle errors
        console.error('Error:', error.response ? error.response.data : error);
        return null;
    }
}


// Execute the function
async function executeScript() {
    try {
        const accessToken = await getBearerToken();
        if (!accessToken) {
            console.error('Failed to obtain Bearer token.');
            return;
        }

        const datasetsWithConnections = await getDatasetsWithConnections(accessToken);
        if (datasetsWithConnections) {
            console.log('Datasets with Connection Names:');
            console.log(datasetsWithConnections);
        }

    } catch (error) {
        console.error('Error executing script:', error.response ? error.response.data : error);
    }
}

// Call the function to execute the script
executeScript();
