// get-column-names-all-pages.js

// Load environment variables and necessary modules
require('dotenv').config({ path: 'sigma-api-recipes/.env' });
const getBearerToken = require('../get-access-token');
const axios = require('axios');

// Define environment variables
const baseURL = process.env.baseURL; // Base URL for Sigma API
const workbookId = process.env.WORKBOOK_ID; // Single workbook ID from .env

// Function to fetch the workbook details
async function getWorkbookDetails(workbookId, accessToken) {
    const requestURL = `${baseURL}/workbooks/${workbookId}`;
    try {
        const response = await axios.get(requestURL, {
            headers: { Authorization: `Bearer ${accessToken}` }
        });
        return response.data.name || "Unnamed Workbook"; // Return the workbook name or fallback
    } catch (error) {
        console.error(`Error fetching workbook details for ID ${workbookId}:`, error.response ? error.response.data : error.message);
        throw error; // Stop execution on failure
    }
}

// Function to fetch pages for a workbook
async function getPages(workbookId, accessToken) {
    const requestURL = `${baseURL}/workbooks/${workbookId}/pages`;
    try {
        const response = await axios.get(requestURL, {
            headers: { Authorization: `Bearer ${accessToken}` }
        });
        return response.data.entries || [];
    } catch (error) {
        console.error('Error fetching pages:', error.response ? error.response.data : error.message);
        throw error; // Stop execution on failure
    }
}

// Function to fetch elements for a page
async function getElements(pageId, accessToken) {
    const requestURL = `${baseURL}/workbooks/${workbookId}/pages/${pageId}/elements`;
    try {
        const response = await axios.get(requestURL, {
            headers: { Authorization: `Bearer ${accessToken}` }
        });
        return response.data.entries || [];
    } catch (error) {
        console.error(`Error fetching elements for page ${pageId}:`, error.response ? error.response.data : error.message);
        throw error; // Stop execution on failure
    }
}

// Function to fetch columns for a specific element with pagination support
async function getColumns(workbookId, elementId, accessToken) {
    const columns = [];
    let nextPage = null;

    do {
        const requestURL = `${baseURL}/workbooks/${workbookId}/elements/${elementId}/columns?limit=${process.env.LIMIT}${nextPage ? `&page=${nextPage}` : ''}`;
        console.log(`Fetching columns for element: ${elementId} (Page: ${nextPage || '1'})`);

        try {
            const response = await axios.get(requestURL, {
                headers: { Authorization: `Bearer ${accessToken}` }
            });

            // Append retrieved columns to the list
            columns.push(...response.data.entries);

            // Update nextPage token from the response, if present
            nextPage = response.data.nextPage || null;
        } catch (error) {
            console.error(`Error fetching columns for element ${elementId}:`, error.response ? error.response.data : error.message);
            throw error; // Stop execution on failure
        }
    } while (nextPage);

    return columns;
}

// Main function to process the workbook
async function fetchColumnsForWorkbook() {
    const accessToken = await getBearerToken();
    if (!accessToken) {
        console.error('Failed to obtain Bearer token.');
        return;
    }

    try {
        // Fetch the workbook name dynamically
        const workbookName = await getWorkbookDetails(workbookId, accessToken);

        console.log(`Processing workbook: ${workbookId}`);
        console.log(`Workbook: ${workbookName}`);

        const pages = await getPages(workbookId, accessToken);
        console.log(`Page Count: ${pages.length}\n`);

        for (const page of pages) {
            console.log(`Page Name: ${page.name}`);
            const elements = await getElements(page.pageId, accessToken);

            for (const element of elements) {
                console.log(`  - Element Name: ${element.name || 'Unnamed Element'}`);
                console.log(`    Element ID: ${element.elementId}`);
                
                // Fetch columns for this element
                const columns = await getColumns(workbookId, element.elementId, accessToken);

                // Log column names and count for this element
                console.log(`    - Column Count: ${columns.length}`);
                console.log('    - Columns:');
                columns.forEach(col => {
                    console.log(`      - ${col.label}`);
                });
            }
        }
    } catch (error) {
        console.error(`Error processing workbook ${workbookId}:`, error.response ? error.response.data : error.message);
    }
}

// Execute the main function
fetchColumnsForWorkbook();